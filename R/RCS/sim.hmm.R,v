head	1.3;
access;
symbols;
locks
	rolf:1.3; strict;
comment	@# @;


1.3
date	2014.01.31.02.46.27;	author rolf;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.27.08.04.30;	author rolf;	state Exp;
branches;
next	1.1;

1.1
date	2009.09.23.02.26.08;	author rturner;	state Exp;
branches;
next	;


desc
@See documentation.
@


1.3
log
@Can now simulated multiple sequences (possibly of different
lengths).
@
text
@sim.hmm <- function(nsim,tpm,Rho,ispd=NULL,yval=NULL,verb=FALSE) {
#
# Function sim.hmm to simulate data from a hidden Markov
# model with transition probability matrix tpm, and discrete
# (non-parametric) distributions specified by the matrix Rho.
#

# Check for validity of the Rho argument:
if(any(Rho<0)) stop("Negative entries in Rho.\n")
Rho <- as.matrix(Rho)
xxx <- apply(Rho,2,sum)
if(!identical(all.equal(xxx,rep(1,ncol(Rho))),TRUE))
	stop("Columns of Rho do not all sum to 1.\n")

# Check for validity of yval argument:
if(is.null(yval)) {
	yval <- 1:nrow(Rho)
} else {
	if(length(yval)!=nrow(Rho))
		stop(paste("Mismatch between length of \"yval\"",
                           "and number of rows of \"Rho\".\n"))
}
row.names(Rho) <- yval
nseq <- length(nsim)

# If Rho has a single column, generate i.i.d. data.
if(ncol(Rho)==1) {
	temp <- lapply(nsim,function(n,yval,Rho){
				sample(yval,size=n,prob=Rho[,1],replace=TRUE)
                            },yval=yval,Rho=Rho)
	return(if(nseq==1) temp[[1]] else temp)
}

if(ncol(tpm) != nrow(tpm))
	stop("The matrix tpm must be square.\n")
if(ncol(tpm) != ncol(Rho))
	stop("Mismatch between dimensions of tpm and Rho.\n")
if(any(tpm<0)) stop("Negative entries in tpm.\n")
xxx <- apply(tpm,1,sum)
if(!identical(all.equal(xxx,rep(1,nrow(tpm))),TRUE))
	stop("Rows of tpm do not all sum to 1.\n")

if(is.null(ispd)) ispd <- revise.ispd(tpm)
K    <- ncol(Rho)
M    <- nrow(Rho)
ntot <- sum(nsim)
rslt <- if(is.numeric(yval)) numeric(ntot) else character(ntot)
jr   <- 0
for(j in 1:nseq) {
	jr <- jr+1
	s1     <- sample(1:K,1,prob=ispd)
        rslt[jr] <- sample(yval,1,prob=Rho[,s1])
	for(i in 2:nsim[j]) {
		jr <- jr+1
		s1 <- sample(1:K,1,prob=tpm[s1,])
		rslt[jr] <- sample(yval,1,prob=Rho[,s1])
		if(verb) {
			if(jr%%1000 == 0) cat(jr,"")
			if(jr%%10000 == 0) cat("\n")
		}
	}
}
if(verb) cat("\n")
if(nseq==1) rslt else {
	rslt <- unname(tapply(rslt,rep(1:nseq,nsim),function(x){x}))
	attr(rslt,"dim") <- NULL
	rslt
}
}
@


1.2
log
@Now takes an argument yval specifying the set of possible
observations.  Arguments are changed so that nsim is now
a *vector*.  Its length specifies the number of independent
sequences generated; its entries specify the length of each
sequence.
@
text
@d1 1
a1 1
sim.hmm <- function(nsim,tpm,Rho,ispd=NULL,yval=NULL) {
d46 3
a48 1
rslt <- list()
d50 1
d52 1
a52 2
	y      <- list()
	y[[1]] <- sample(yval,1,prob=Rho[,s1])
d54 1
d56 5
a60 1
		y[[i]] <- sample(yval,1,prob=Rho[,s1])
a61 1
	rslt[[j]] <- unlist(y)
d63 6
a68 1
if(nseq==1) rslt[[1]] else rslt 
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
sim.hmm <- function(nsim,tpm,Rho,nrep=1) {
d15 11
d28 4
a31 3
	temp <- sample(1:nrow(Rho),size=nsim*nrep,
                       prob=Rho[,1],replace=TRUE)
	return(if(nrep==1) temp else matrix(temp,ncol=nrep))
d37 1
a37 1
	stop("Mismatch in dimensions of tpm and Rho.\n")
d43 1
a43 1
ispd <- revise.ispd(tpm)
d47 1
a47 1
for(j in 1:nrep) {
d50 2
a51 2
	y[[1]] <- sample(1:M,1,prob=Rho[,s1])
	for(i in 2:nsim) {
d53 1
a53 1
		y[[i]] <- sample(1:M,1,prob=Rho[,s1])
d57 1
a57 1
if(nrep>1) matrix(unlist(rslt),ncol=nrep) else unlist(rslt)
@
